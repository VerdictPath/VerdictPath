# Verdict Path - Smart Notifications & Action Dashboard Implementation

## 🎯 IMPLEMENTATION SCOPE

Implement TWO core features for Verdict Path:
1. **Smart Notifications & Push Alerts System** (Priority 1 - Weeks 1-3)
2. **Law Firm-Controlled Action Dashboard** (Priority 2 - Weeks 4-6)

---

## 📋 PHASE 1: SMART NOTIFICATIONS SYSTEM (Weeks 1-3)

### Prerequisites
- Expo SDK 52 installed
- Backend running on port 5000
- PostgreSQL database accessible
- Law firm and medical provider portals functional

### Goal
Enable law firms and medical providers to send push notifications to users, plus automated system notifications for engagement.

---

## 🔔 Task 1.1: Backend - Notification Infrastructure

### Location
`backend/routes/notifications.js` (create new file)
`backend/controllers/notificationController.js` (create new file)

### Database Schema
```sql
-- Add to backend/config/database.sql

-- Store notification tokens for push notifications
CREATE TABLE notification_tokens (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  token TEXT NOT NULL,
  platform VARCHAR(20), -- 'ios', 'android', 'web'
  created_at TIMESTAMP DEFAULT NOW(),
  last_used TIMESTAMP DEFAULT NOW()
);

-- Store notification history
CREATE TABLE notifications (
  id SERIAL PRIMARY KEY,
  recipient_user_id INTEGER REFERENCES users(id),
  sender_type VARCHAR(50), -- 'law_firm', 'medical_provider', 'system'
  sender_id INTEGER, -- References law_firms.id or medical_providers.id
  notification_type VARCHAR(50), -- 'task_assigned', 'document_request', 'daily_streak', etc.
  priority VARCHAR(20), -- 'urgent', 'high', 'medium', 'low'
  title VARCHAR(255),
  body TEXT,
  action_url VARCHAR(500),
  deep_link VARCHAR(500),
  data JSONB, -- Additional payload data
  sent_at TIMESTAMP DEFAULT NOW(),
  delivered_at TIMESTAMP,
  opened_at TIMESTAMP,
  acted_upon_at TIMESTAMP,
  status VARCHAR(20) DEFAULT 'sent' -- 'sent', 'delivered', 'opened', 'acted', 'failed'
);

-- User notification preferences
CREATE TABLE notification_preferences (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) UNIQUE,
  daily_streak BOOLEAN DEFAULT true,
  milestone_updates BOOLEAN DEFAULT true,
  law_firm_messages BOOLEAN DEFAULT true,
  medical_provider_messages BOOLEAN DEFAULT true,
  weekly_summary BOOLEAN DEFAULT true,
  coin_rewards BOOLEAN DEFAULT true,
  quiet_hours_start TIME DEFAULT '22:00:00',
  quiet_hours_end TIME DEFAULT '08:00:00',
  timezone VARCHAR(50) DEFAULT 'America/New_York',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Notification templates for law firms
CREATE TABLE notification_templates (
  id SERIAL PRIMARY KEY,
  law_firm_id INTEGER REFERENCES law_firms(id),
  template_name VARCHAR(255),
  notification_type VARCHAR(50),
  priority VARCHAR(20),
  title VARCHAR(255),
  body TEXT,
  action_url VARCHAR(500),
  created_by INTEGER,
  created_at TIMESTAMP DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true
);
```

### API Endpoints

#### POST /api/notifications/register-token
Register user's device token for push notifications
```javascript
// Request body:
{
  "token": "ExponentPushToken[xxxxx]",
  "platform": "ios"
}

// Response:
{
  "success": true,
  "message": "Notification token registered"
}
```

#### POST /api/lawfirm/send-notification
Law firm sends notification to client
```javascript
// Requires JWT auth with law_firm role

// Request body:
{
  "clientId": 123,
  "type": "task_assigned",
  "priority": "urgent",
  "title": "Document Review Required",
  "body": "Please review and sign the settlement agreement by Friday.",
  "actionUrl": "/tasks/settlement-review",
  "deepLink": "verdictpath://task/456",
  "data": {
    "taskId": 456,
    "dueDate": "2025-11-03"
  }
}

// Response:
{
  "success": true,
  "notificationId": 789,
  "ticketId": "xxxxx-xxxx-xxxx" // Expo push receipt ID
}
```

#### POST /api/medicalprovider/send-notification
Medical provider sends notification to patient
```javascript
// Similar to law firm endpoint but for medical providers

// Request body:
{
  "patientId": 456,
  "type": "document_request",
  "priority": "high",
  "title": "Medical Records Authorization",
  "body": "We need your authorization to release MRI results to your attorney.",
  "actionUrl": "/medical/authorize",
  "deepLink": "verdictpath://medical/authorize/789"
}
```

#### POST /api/notifications/send-system
Internal endpoint for system notifications (cron jobs)
```javascript
// Only accessible internally (not exposed to public)

// Request body:
{
  "userId": 123,
  "type": "daily_streak",
  "priority": "low",
  "title": "⚓ Day 7 Streak!",
  "body": "Don't break the chain! Log in now to claim 50 bonus coins.",
  "deepLink": "verdictpath://coins/claim"
}
```

#### GET /api/notifications/history
Get user's notification history
```javascript
// Query params: ?limit=20&offset=0

// Response:
{
  "notifications": [
    {
      "id": 789,
      "type": "task_assigned",
      "priority": "urgent",
      "title": "Document Review Required",
      "body": "Please review and sign...",
      "sentAt": "2025-10-30T14:30:00Z",
      "deliveredAt": "2025-10-30T14:30:05Z",
      "openedAt": "2025-10-30T14:32:00Z",
      "status": "opened",
      "sender": {
        "type": "law_firm",
        "name": "Smith & Associates"
      }
    }
  ],
  "total": 45,
  "unread": 3
}
```

#### GET /api/notifications/preferences
Get user's notification preferences
```javascript
// Response:
{
  "dailyStreak": true,
  "milestoneUpdates": true,
  "lawFirmMessages": true,
  "medicalProviderMessages": true,
  "weeklySummary": true,
  "coinRewards": true,
  "quietHours": {
    "start": "22:00",
    "end": "08:00",
    "timezone": "America/New_York"
  }
}
```

#### PUT /api/notifications/preferences
Update user's notification preferences
```javascript
// Request body:
{
  "dailyStreak": false,
  "quietHours": {
    "start": "23:00",
    "end": "07:00"
  }
}
```

### Controller Implementation (notificationController.js)

```javascript
const { Expo } = require('expo-server-sdk');
const pool = require('../config/database');

const expo = new Expo();

// Send push notification via Expo
async function sendPushNotification(userId, notificationData) {
  try {
    // Get user's device tokens
    const tokensResult = await pool.query(
      'SELECT token, platform FROM notification_tokens WHERE user_id = $1',
      [userId]
    );
    
    if (tokensResult.rows.length === 0) {
      return { success: false, error: 'No device tokens found' };
    }
    
    // Check user preferences and quiet hours
    const prefsResult = await pool.query(
      'SELECT * FROM notification_preferences WHERE user_id = $1',
      [userId]
    );
    
    const prefs = prefsResult.rows[0];
    
    // Check if notification type is enabled
    if (!shouldSendNotification(notificationData.type, prefs)) {
      return { success: false, error: 'User has disabled this notification type' };
    }
    
    // Check quiet hours (unless urgent)
    if (notificationData.priority !== 'urgent' && isQuietHours(prefs)) {
      // Queue for later delivery
      await queueNotification(userId, notificationData);
      return { success: true, queued: true };
    }
    
    // Prepare Expo push messages
    const messages = tokensResult.rows.map(tokenRow => ({
      to: tokenRow.token,
      sound: notificationData.priority === 'urgent' ? 'default' : null,
      title: notificationData.title,
      body: notificationData.body,
      data: {
        ...notificationData.data,
        deepLink: notificationData.deepLink,
        actionUrl: notificationData.actionUrl,
        notificationType: notificationData.type,
        priority: notificationData.priority
      },
      badge: await getUnreadCount(userId),
      priority: notificationData.priority === 'urgent' ? 'high' : 'default',
      channelId: 'default'
    }));
    
    // Send via Expo
    const tickets = await expo.sendPushNotificationsAsync(messages);
    
    // Store notification in database
    const notificationId = await storeNotification(userId, notificationData, tickets[0].id);
    
    return {
      success: true,
      notificationId,
      ticketId: tickets[0].id
    };
    
  } catch (error) {
    console.error('Error sending push notification:', error);
    throw error;
  }
}

// Helper: Check if notification should be sent based on preferences
function shouldSendNotification(type, preferences) {
  const typeMap = {
    'daily_streak': 'daily_streak',
    'milestone_update': 'milestone_updates',
    'law_firm_message': 'law_firm_messages',
    'medical_provider_message': 'medical_provider_messages',
    'weekly_summary': 'weekly_summary',
    'coin_reward': 'coin_rewards'
  };
  
  const prefKey = typeMap[type];
  return prefKey ? preferences[prefKey] : true;
}

// Helper: Check if current time is in quiet hours
function isQuietHours(preferences) {
  const now = new Date();
  const userTime = new Date(now.toLocaleString('en-US', { timeZone: preferences.timezone }));
  const currentHour = userTime.getHours();
  const currentMinute = userTime.getMinutes();
  
  const [startHour, startMin] = preferences.quiet_hours_start.split(':').map(Number);
  const [endHour, endMin] = preferences.quiet_hours_end.split(':').map(Number);
  
  const currentTime = currentHour * 60 + currentMinute;
  const startTime = startHour * 60 + startMin;
  const endTime = endHour * 60 + endMin;
  
  if (startTime < endTime) {
    return currentTime >= startTime && currentTime < endTime;
  } else {
    return currentTime >= startTime || currentTime < endTime;
  }
}

// Store notification in database
async function storeNotification(userId, data, ticketId) {
  const result = await pool.query(
    `INSERT INTO notifications 
     (recipient_user_id, sender_type, sender_id, notification_type, priority, 
      title, body, action_url, deep_link, data, status)
     VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 'sent')
     RETURNING id`,
    [
      userId,
      data.senderType || 'system',
      data.senderId || null,
      data.type,
      data.priority,
      data.title,
      data.body,
      data.actionUrl || null,
      data.deepLink || null,
      JSON.stringify({ ticketId, ...data.data })
    ]
  );
  
  return result.rows[0].id;
}

// Get unread notification count
async function getUnreadCount(userId) {
  const result = await pool.query(
    `SELECT COUNT(*) FROM notifications 
     WHERE recipient_user_id = $1 AND opened_at IS NULL`,
    [userId]
  );
  return parseInt(result.rows[0].count);
}

module.exports = {
  sendPushNotification,
  // ... other exports
};
```

---

## 📱 Task 1.2: Mobile App - Notification Handling

### Location
`src/screens/NotificationSettingsScreen.js` (create new)
`src/services/notificationService.js` (create new)
`App.js` (modify)

### Setup Expo Notifications

#### Install Dependencies
```bash
npx expo install expo-notifications expo-device expo-constants
```

#### App.js - Initialize Notifications
```javascript
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { useEffect, useRef } from 'react';

// Configure notification behavior
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

function App() {
  const notificationListener = useRef();
  const responseListener = useRef();

  useEffect(() => {
    // Register for push notifications
    registerForPushNotificationsAsync();

    // Listen for incoming notifications
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      console.log('Notification received:', notification);
    });

    // Listen for notification interactions
    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      const { deepLink, actionUrl } = response.notification.request.content.data;
      
      if (deepLink) {
        handleDeepLink(deepLink);
      } else if (actionUrl) {
        navigation.navigate(actionUrl);
      }
      
      // Mark as opened
      markNotificationAsOpened(response.notification.request.identifier);
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  // ... rest of app
}

// Register for push notifications
async function registerForPushNotificationsAsync() {
  let token;

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== 'granted') {
      alert('Failed to get push notification permissions!');
      return;
    }

    token = (await Notifications.getExpoPushTokenAsync()).data;
    console.log('Push token:', token);

    // Send token to backend
    await fetch(`${API_URL}/api/notifications/register-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${userToken}` // From AsyncStorage
      },
      body: JSON.stringify({
        token,
        platform: Platform.OS
      })
    });
  } else {
    alert('Must use physical device for Push Notifications');
  }

  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#d4a574',
    });
  }

  return token;
}

// Handle deep links
function handleDeepLink(deepLink) {
  // Parse deepLink: verdictpath://screen/param
  const url = deepLink.replace('verdictpath://', '');
  const [screen, ...params] = url.split('/');
  
  switch (screen) {
    case 'roadmap':
      navigation.navigate('Roadmap');
      break;
    case 'task':
      navigation.navigate('TaskDetail', { taskId: params[0] });
      break;
    case 'medical':
      if (params[0] === 'upload') {
        navigation.navigate('MedicalHub', { autoUpload: true });
      }
      break;
    case 'coins':
      if (params[0] === 'claim') {
        navigation.navigate('Coins', { autoClaim: true });
      }
      break;
    default:
      navigation.navigate('Dashboard');
  }
}

// Mark notification as opened
async function markNotificationAsOpened(notificationId) {
  try {
    await fetch(`${API_URL}/api/notifications/${notificationId}/opened`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${userToken}`
      }
    });
  } catch (error) {
    console.error('Error marking notification as opened:', error);
  }
}
```

### NotificationSettingsScreen.js
```javascript
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Switch,
  ScrollView,
  TouchableOpacity,
  Alert
} from 'react-native';

const NotificationSettingsScreen = () => {
  const [preferences, setPreferences] = useState({
    dailyStreak: true,
    milestoneUpdates: true,
    lawFirmMessages: true,
    medicalProviderMessages: true,
    weeklySummary: true,
    coinRewards: true,
    quietHours: {
      start: '22:00',
      end: '08:00',
      timezone: 'America/New_York'
    }
  });

  useEffect(() => {
    loadPreferences();
  }, []);

  const loadPreferences = async () => {
    try {
      const token = await AsyncStorage.getItem('userToken');
      const response = await fetch(`${API_URL}/api/notifications/preferences`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setPreferences(data);
      }
    } catch (error) {
      console.error('Error loading preferences:', error);
    }
  };

  const updatePreference = async (key, value) => {
    try {
      const token = await AsyncStorage.getItem('userToken');
      const newPreferences = { ...preferences, [key]: value };
      
      setPreferences(newPreferences);
      
      await fetch(`${API_URL}/api/notifications/preferences`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(newPreferences)
      });
      
    } catch (error) {
      Alert.alert('Error', 'Failed to update preferences');
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>🔔 Notification Settings</Text>
      
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Engagement Notifications</Text>
        
        <View style={styles.settingRow}>
          <View style={styles.settingInfo}>
            <Text style={styles.settingLabel}>Daily Streak Reminders</Text>
            <Text style={styles.settingDesc}>Get reminded to maintain your login streak</Text>
          </View>
          <Switch
            value={preferences.dailyStreak}
            onValueChange={(value) => updatePreference('dailyStreak', value)}
            trackColor={{ false: '#ccc', true: '#d4a574' }}
          />
        </View>
        
        <View style={styles.settingRow}>
          <View style={styles.settingInfo}>
            <Text style={styles.settingLabel}>Milestone Updates</Text>
            <Text style={styles.settingDesc}>Celebrations when you complete stages</Text>
          </View>
          <Switch
            value={preferences.milestoneUpdates}
            onValueChange={(value) => updatePreference('milestoneUpdates', value)}
            trackColor={{ false: '#ccc', true: '#d4a574' }}
          />
        </View>
        
        <View style={styles.settingRow}>
          <View style={styles.settingInfo}>
            <Text style={styles.settingLabel}>Coin Rewards</Text>
            <Text style={styles.settingDesc}>Notifications about earned coins</Text>
          </View>
          <Switch
            value={preferences.coinRewards}
            onValueChange={(value) => updatePreference('coinRewards', value)}
            trackColor={{ false: '#ccc', true: '#d4a574' }}
          />
        </View>
      </View>
      
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Professional Communications</Text>
        
        <View style={styles.settingRow}>
          <View style={styles.settingInfo}>
            <Text style={styles.settingLabel}>Law Firm Messages</Text>
            <Text style={styles.settingDesc}>Updates from your attorney</Text>
          </View>
          <Switch
            value={preferences.lawFirmMessages}
            onValueChange={(value) => updatePreference('lawFirmMessages', value)}
            trackColor={{ false: '#ccc', true: '#d4a574' }}
          />
        </View>
        
        <View style={styles.settingRow}>
          <View style={styles.settingInfo}>
            <Text style={styles.settingLabel}>Medical Provider Requests</Text>
            <Text style={styles.settingDesc}>Updates from your healthcare providers</Text>
          </View>
          <Switch
            value={preferences.medicalProviderMessages}
            onValueChange={(value) => updatePreference('medicalProviderMessages', value)}
            trackColor={{ false: '#ccc', true: '#d4a574' }}
          />
        </View>
      </View>
      
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Quiet Hours</Text>
        <Text style={styles.sectionDesc}>
          Non-urgent notifications won't be sent during these hours
        </Text>
        
        <View style={styles.quietHoursRow}>
          <Text style={styles.quietHoursLabel}>From:</Text>
          <Text style={styles.quietHoursTime}>{preferences.quietHours.start}</Text>
          <TouchableOpacity style={styles.editButton}>
            <Text style={styles.editButtonText}>Edit</Text>
          </TouchableOpacity>
        </View>
        
        <View style={styles.quietHoursRow}>
          <Text style={styles.quietHoursLabel}>To:</Text>
          <Text style={styles.quietHoursTime}>{preferences.quietHours.end}</Text>
          <TouchableOpacity style={styles.editButton}>
            <Text style={styles.editButtonText}>Edit</Text>
          </TouchableOpacity>
        </View>
      </View>
      
      <Text style={styles.footer}>
        ⚠️ Urgent notifications from your attorney will override quiet hours
      </Text>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f9f6f0',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    padding: 20,
    paddingBottom: 10,
  },
  section: {
    backgroundColor: '#fff',
    marginHorizontal: 15,
    marginVertical: 10,
    borderRadius: 10,
    padding: 15,
    borderWidth: 1,
    borderColor: '#d4a574',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 5,
  },
  sectionDesc: {
    fontSize: 14,
    color: '#666',
    marginBottom: 15,
  },
  settingRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  settingInfo: {
    flex: 1,
    marginRight: 10,
  },
  settingLabel: {
    fontSize: 16,
    color: '#2c3e50',
    fontWeight: '500',
  },
  settingDesc: {
    fontSize: 12,
    color: '#999',
    marginTop: 2,
  },
  quietHoursRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
  },
  quietHoursLabel: {
    fontSize: 16,
    color: '#2c3e50',
    width: 60,
  },
  quietHoursTime: {
    fontSize: 16,
    color: '#d4a574',
    fontWeight: 'bold',
    flex: 1,
  },
  editButton: {
    backgroundColor: '#d4a574',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 5,
  },
  editButtonText: {
    color: '#2c3e50',
    fontWeight: 'bold',
  },
  footer: {
    fontSize: 12,
    color: '#e74c3c',
    textAlign: 'center',
    padding: 20,
    fontStyle: 'italic',
  },
});

export default NotificationSettingsScreen;
```

---

## 🏢 Task 1.3: Law Firm Portal - Notification Sending Interface

### Location
`backend/views/lawfirm-notifications.ejs` (create new)
`backend/public/css/lawfirm-notifications.css` (create new)
`backend/public/js/lawfirm-notifications.js` (create new)

### EJS Template (lawfirm-notifications.ejs)
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Send Client Notifications - Verdict Path</title>
  <link rel="stylesheet" href="/css/lawfirm-notifications.css">
</head>
<body>
  <div class="container">
    <header class="header">
      <h1>📱 Client Notifications</h1>
      <p>Send push notifications to your clients</p>
    </header>

    <div class="notification-form-card">
      <h2>Send New Notification</h2>
      
      <form id="notificationForm">
        <div class="form-group">
          <label for="clientSelect">Client *</label>
          <select id="clientSelect" required>
            <option value="">Select a client...</option>
            <% clients.forEach(client => { %>
              <option value="<%= client.id %>">
                <%= client.first_name %> <%= client.last_name %>
              </option>
            <% }) %>
          </select>
        </div>

        <div class="form-group">
          <label for="prioritySelect">Priority *</label>
          <select id="prioritySelect" required>
            <option value="urgent">⚠️ Urgent (Sound + Banner)</option>
            <option value="high">🔸 High (Sound)</option>
            <option value="medium" selected>📋 Medium (Silent)</option>
            <option value="low">📌 Low (Silent)</option>
          </select>
        </div>

        <div class="form-group">
          <label for="templateSelect">Use Template (Optional)</label>
          <select id="templateSelect">
            <option value="">Create custom notification...</option>
            <option value="document-review">Document Review Required</option>
            <option value="deposition-prep">Deposition Preparation</option>
            <option value="settlement-offer">Settlement Offer Received</option>
            <option value="court-date">Court Date Scheduled</option>
            <option value="missing-info">Missing Information Needed</option>
          </select>
        </div>

        <div class="form-group">
          <label for="titleInput">Title * (max 65 characters)</label>
          <input 
            type="text" 
            id="titleInput" 
            maxlength="65" 
            placeholder="e.g., Settlement Agreement Ready"
            required
          />
          <span class="char-count">0/65</span>
        </div>

        <div class="form-group">
          <label for="bodyInput">Message * (max 240 characters)</label>
          <textarea 
            id="bodyInput" 
            maxlength="240" 
            rows="4"
            placeholder="e.g., Please review and sign the attached settlement agreement by Friday. Call me if you have any questions."
            required
          ></textarea>
          <span class="char-count">0/240</span>
        </div>

        <div class="form-group">
          <label for="actionSelect">Link To</label>
          <select id="actionSelect">
            <option value="">Dashboard (default)</option>
            <option value="roadmap">Roadmap Screen</option>
            <option value="medical">Medical Hub</option>
            <option value="tasks">Tasks List</option>
            <option value="documents">Documents</option>
          </select>
        </div>

        <div class="form-group">
          <label>
            <input type="checkbox" id="immediateCheckbox" checked />
            Send immediately
          </label>
          <p class="help-text">Unchecked: Will send at optimal time (9:00 AM client's timezone)</p>
        </div>

        <div class="button-group">
          <button type="button" class="btn btn-secondary" id="previewBtn">
            Preview Notification
          </button>
          <button type="submit" class="btn btn-primary">
            Send Notification
          </button>
        </div>
      </form>
    </div>

    <!-- Notification History -->
    <div class="history-card">
      <h2>📊 Recent Notifications</h2>
      
      <div class="filters">
        <select id="filterClient">
          <option value="">All Clients</option>
          <% clients.forEach(client => { %>
            <option value="<%= client.id %>">
              <%= client.first_name %> <%= client.last_name %>
            </option>
          <% }) %>
        </select>
        
        <select id="filterStatus">
          <option value="">All Status</option>
          <option value="sent">Sent</option>
          <option value="delivered">Delivered</option>
          <option value="opened">Opened</option>
          <option value="acted">Acted Upon</option>
        </select>
      </div>

      <table class="history-table">
        <thead>
          <tr>
            <th>Date/Time</th>
            <th>Client</th>
            <th>Title</th>
            <th>Priority</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody id="historyTableBody">
          <% notifications.forEach(notif => { %>
            <tr>
              <td><%= new Date(notif.sent_at).toLocaleString() %></td>
              <td><%= notif.client_name %></td>
              <td><%= notif.title %></td>
              <td>
                <span class="priority-badge priority-<%= notif.priority %>">
                  <%= notif.priority.toUpperCase() %>
                </span>
              </td>
              <td>
                <span class="status-badge status-<%= notif.status %>">
                  <% if (notif.status === 'acted') { %>
                    ✓ Acted Upon
                  <% } else if (notif.status === 'opened') { %>
                    ✓ Opened
                  <% } else if (notif.status === 'delivered') { %>
                    ✓ Delivered
                  <% } else { %>
                    ⏳ Sent
                  <% } %>
                </span>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Analytics Overview -->
    <div class="analytics-card">
      <h2>📈 Performance Metrics (Last 30 Days)</h2>
      
      <div class="metrics-grid">
        <div class="metric">
          <div class="metric-value"><%= analytics.totalSent %></div>
          <div class="metric-label">Sent</div>
        </div>
        <div class="metric">
          <div class="metric-value"><%= analytics.deliveryRate %>%</div>
          <div class="metric-label">Delivery Rate</div>
        </div>
        <div class="metric">
          <div class="metric-value"><%= analytics.openRate %>%</div>
          <div class="metric-label">Open Rate</div>
        </div>
        <div class="metric">
          <div class="metric-value"><%= analytics.actionRate %>%</div>
          <div class="metric-label">Action Rate</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Preview Modal -->
  <div id="previewModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Notification Preview</h2>
      
      <div class="phone-mockup">
        <div class="notification-preview">
          <div class="preview-icon">⚓</div>
          <div class="preview-content">
            <div class="preview-app">Verdict Path</div>
            <div class="preview-title" id="previewTitle"></div>
            <div class="preview-body" id="previewBody"></div>
            <div class="preview-time">now</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/js/lawfirm-notifications.js"></script>
</body>
</html>
```

### JavaScript (lawfirm-notifications.js)
```javascript
// Character counters
document.getElementById('titleInput').addEventListener('input', function(e) {
  const count = e.target.value.length;
  e.target.nextElementSibling.textContent = `${count}/65`;
});

document.getElementById('bodyInput').addEventListener('input', function(e) {
  const count = e.target.value.length;
  e.target.nextElementSibling.textContent = `${count}/240`;
});

// Template selection
document.getElementById('templateSelect').addEventListener('change', function(e) {
  const templates = {
    'document-review': {
      title: 'Document Review Required',
      body: 'Please review and sign the attached documents by the end of this week. Let me know if you have any questions.',
      priority: 'high',
      action: 'documents'
    },
    'deposition-prep': {
      title: 'Deposition Preparation Meeting',
      body: 'We need to schedule a prep meeting for your deposition. Please review your calendar and let me know your availability.',
      priority: 'high',
      action: 'tasks'
    },
    'settlement-offer': {
      title: 'Settlement Offer Received',
      body: 'We received a settlement offer from the defense. I need to discuss this with you as soon as possible.',
      priority: 'urgent',
      action: 'tasks'
    },
    'court-date': {
      title: 'Court Date Scheduled',
      body: 'Your court appearance has been scheduled. Check your roadmap for the date and time.',
      priority: 'high',
      action: 'roadmap'
    },
    'missing-info': {
      title: 'Information Needed',
      body: 'We need additional information from you to proceed with your case. Please upload the requested documents.',
      priority: 'medium',
      action: 'medical'
    }
  };

  const template = templates[e.target.value];
  if (template) {
    document.getElementById('titleInput').value = template.title;
    document.getElementById('bodyInput').value = template.body;
    document.getElementById('prioritySelect').value = template.priority;
    document.getElementById('actionSelect').value = template.action;
    
    // Trigger char count updates
    document.getElementById('titleInput').dispatchEvent(new Event('input'));
    document.getElementById('bodyInput').dispatchEvent(new Event('input'));
  }
});

// Preview notification
document.getElementById('previewBtn').addEventListener('click', function() {
  const title = document.getElementById('titleInput').value;
  const body = document.getElementById('bodyInput').value;
  
  if (!title || !body) {
    alert('Please enter a title and message first');
    return;
  }
  
  document.getElementById('previewTitle').textContent = title;
  document.getElementById('previewBody').textContent = body;
  document.getElementById('previewModal').style.display = 'block';
});

// Close modal
document.querySelector('.close').addEventListener('click', function() {
  document.getElementById('previewModal').style.display = 'none';
});

// Send notification
document.getElementById('notificationForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = {
    clientId: document.getElementById('clientSelect').value,
    type: 'law_firm_message',
    priority: document.getElementById('prioritySelect').value,
    title: document.getElementById('titleInput').value,
    body: document.getElementById('bodyInput').value,
    actionUrl: document.getElementById('actionSelect').value,
    sendImmediate: document.getElementById('immediateCheckbox').checked
  };
  
  try {
    const response = await fetch('/api/lawfirm/send-notification', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert('✓ Notification sent successfully!');
      // Refresh the page to show new notification in history
      window.location.reload();
    } else {
      alert('Error sending notification: ' + result.error);
    }
  } catch (error) {
    console.error('Error:', error);
    alert('Failed to send notification');
  }
});
```

---

## ⏰ Task 1.4: Automated System Notifications (Cron Jobs)

### Location
`backend/services/notificationScheduler.js` (create new)
`backend/server.js` (modify to initialize scheduler)

### Install Cron Library
```bash
cd backend
npm install node-cron
```

### notificationScheduler.js
```javascript
const cron = require('node-cron');
const pool = require('../config/database');
const { sendPushNotification } = require('../controllers/notificationController');

// Initialize all scheduled notification jobs
function initializeNotificationScheduler() {
  console.log('📅 Initializing notification scheduler...');
  
  // Daily streak reminders - 7:00 PM every day
  cron.schedule('0 19 * * *', () => {
    sendDailyStreakReminders();
  });
  
  // Milestone proximity alerts - 9:00 AM every day
  cron.schedule('0 9 * * *', () => {
    sendMilestoneProximityAlerts();
  });
  
  // Weekly progress summary - Sunday 10:00 AM
  cron.schedule('0 10 * * 0', () => {
    sendWeeklyProgressSummary();
  });
  
  // Inactive user re-engagement - Daily at 2:00 PM
  cron.schedule('0 14 * * *', () => {
    sendInactiveUserReminders();
  });
  
  console.log('✓ Notification scheduler initialized');
}

// Send daily streak reminders
async function sendDailyStreakReminders() {
  try {
    // Find users with current streak who haven't logged in today
    const result = await pool.query(`
      SELECT id, first_name, login_streak 
      FROM users 
      WHERE login_streak > 0 
      AND last_login < CURRENT_DATE
      AND user_type = 'individual'
    `);
    
    for (const user of result.rows) {
      await sendPushNotification(user.id, {
        type: 'daily_streak',
        priority: 'low',
        title: `⚓ Day ${user.login_streak + 1} Streak!`,
        body: `Don't break the chain! Log in now to claim your ${50 * (user.login_streak + 1)} bonus coins.`,
        deepLink: 'verdictpath://coins/claim',
        senderType: 'system'
      });
    }
    
    console.log(`Sent daily streak reminders to ${result.rows.length} users`);
  } catch (error) {
    console.error('Error sending daily streak reminders:', error);
  }
}

// Send milestone proximity alerts
async function sendMilestoneProximityAlerts() {
  try {
    // Find users who are 1 substage away from completing a stage
    const result = await pool.query(`
      SELECT u.id, u.first_name, u.current_phase,
             COUNT(*) FILTER (WHERE ls.completed = false) as remaining
      FROM users u
      JOIN litigation_stages ls ON u.id = ls.user_id
      WHERE u.user_type = 'individual'
      GROUP BY u.id, u.first_name, u.current_phase
      HAVING COUNT(*) FILTER (WHERE ls.completed = false) = 1
    `);
    
    for (const user of result.rows) {
      await sendPushNotification(user.id, {
        type: 'milestone_update',
        priority: 'medium',
        title: '🗺️ Almost There!',
        body: `You're 1 step away from completing the ${user.current_phase} phase. Finish now!`,
        deepLink: 'verdictpath://roadmap',
        senderType: 'system'
      });
    }
    
    console.log(`Sent milestone proximity alerts to ${result.rows.length} users`);
  } catch (error) {
    console.error('Error sending milestone alerts:', error);
  }
}

// Send weekly progress summary
async function sendWeeklyProgressSummary() {
  try {
    // Find users who completed at least 1 substage this week
    const result = await pool.query(`
      SELECT u.id, u.first_name,
             COUNT(*) as completed_this_week
      FROM users u
      JOIN litigation_stages ls ON u.id = ls.user_id
      WHERE u.user_type = 'individual'
      AND ls.completed = true
      AND ls.completed_at >= CURRENT_DATE - INTERVAL '7 days'
      GROUP BY u.id, u.first_name
      HAVING COUNT(*) > 0
    `);
    
    for (const user of result.rows) {
      await sendPushNotification(user.id, {
        type: 'weekly_summary',
        priority: 'low',
        title: '📊 Week in Review',
        body: `Great work! You completed ${user.completed_this_week} milestone${user.completed_this_week > 1 ? 's' : ''} this week. Keep up the momentum! ⚓`,
        deepLink: 'verdictpath://roadmap',
        senderType: 'system'
      });
    }
    
    console.log(`Sent weekly summaries to ${result.rows.length} users`);
  } catch (error) {
    console.error('Error sending weekly summaries:', error);
  }
}

// Send inactive user reminders
async function sendInactiveUserReminders() {
  try {
    // Find users who haven't logged in for 7+ days but have active cases
    const result = await pool.query(`
      SELECT u.id, u.first_name 
      FROM users u
      WHERE u.user_type = 'individual'
      AND u.last_login < CURRENT_DATE - INTERVAL '7 days'
      AND EXISTS (
        SELECT 1 FROM litigation_stages ls 
        WHERE ls.user_id = u.id AND ls.status = 'active'
      )
    `);
    
    for (const user of result.rows) {
      await sendPushNotification(user.id, {
        type: 're_engagement',
        priority: 'low',
        title: 'We miss you! 🏴‍☠️',
        body: 'Your case is still active. Check in to see if there are any updates from your attorney.',
        deepLink: 'verdictpath://dashboard',
        senderType: 'system'
      });
    }
    
    console.log(`Sent re-engagement reminders to ${result.rows.length} users`);
  } catch (error) {
    console.error('Error sending re-engagement reminders:', error);
  }
}

module.exports = { initializeNotificationScheduler };
```

### Update server.js
```javascript
const { initializeNotificationScheduler } = require('./services/notificationScheduler');

// After all routes are defined...
initializeNotificationScheduler();

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

---

## ✅ PHASE 1 TESTING CHECKLIST

Before moving to Phase 2, test these scenarios:

### Backend
- [ ] Register device token endpoint works
- [ ] Law firm can send notification to client
- [ ] Medical provider can send notification to patient
- [ ] Notifications respect user preferences
- [ ] Quiet hours are enforced (except urgent)
- [ ] Notification history is stored correctly
- [ ] Cron jobs run on schedule

### Mobile App
- [ ] Push notification permissions requested
- [ ] Notifications appear on device
- [ ] Deep links navigate to correct screens
- [ ] User can view notification history
- [ ] User can update preferences
- [ ] Badge count updates correctly

### Law Firm Portal
- [ ] Can select client from dropdown
- [ ] Templates populate form correctly
- [ ] Preview shows notification correctly
- [ ] Notification sends successfully
- [ ] History table updates
- [ ] Analytics display correctly

---

## 📊 PHASE 2: ACTION DASHBOARD (Weeks 4-6)

[Continue with Phase 2 implementation for Action Dashboard with Law Firm-Controlled Content System as detailed in the main Phase 2 document...]

---

## 🎯 SUCCESS CRITERIA

### Phase 1 Complete When:
1. ✅ Law firms can send push notifications to clients
2. ✅ Medical providers can send notifications to patients
3. ✅ Users receive and can interact with notifications
4. ✅ Deep links navigate correctly
5. ✅ Automated notifications run on schedule
6. ✅ Notification history and analytics work
7. ✅ Quiet hours and preferences are respected

### Key Metrics to Track:
- Notification delivery rate (target: >98%)
- Open rate (target: >60%)
- Opt-out rate (target: <10%)
- Law firm adoption (target: >80% of firms sending notifications)
- Daily active users increase (target: +40%)

---

## 🚀 DEPLOYMENT NOTES

1. **Environment Variables** - Add to Railway:
```
EXPO_ACCESS_TOKEN=your_expo_access_token
```

2. **Database Migration** - Run SQL schema updates

3. **Test Notifications** - Before production:
   - Use Expo development client
   - Test on physical iOS and Android devices
   - Verify delivery to multiple users simultaneously

4. **Monitor Expo Push Notification Service**:
   - Check delivery receipts
   - Monitor for errors
   - Review bounce rates

Good luck with implementation! 🏴‍☠️⚓
// src/screens/TreasureChestScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  SafeAreaView,
  Alert,
  Image
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Pirate theme colors matching your app
const COLORS = {
  tan: '#F5E6D3',
  darkTan: '#D3C5A5',
  brown: '#8B4513',
  darkBrown: '#3E2723',
  gold: '#FFD700',
  bronze: '#CD7F32',
  white: '#FFFFFF',
  green: '#4CAF50',
};

// COIN PACKAGES - Value: 1 coin = $0.0002
const COIN_PACKAGES = [
  {
    id: 'small_chest',
    name: 'Small Chest',
    coins: 4950,        // $0.99 / 0.0002 = 4,950 coins
    price: 0.99,
    priceInCents: 99,
    icon: 'üè∫',
    popular: false,
    description: 'Perfect starter pack'
  },
  {
    id: 'medium_chest',
    name: 'Medium Chest',
    coins: 9950,        // $1.99 / 0.0002 = 9,950 coins
    price: 1.99,
    priceInCents: 199,
    icon: 'üì¶',
    popular: false,
    description: 'Great value for progress'
  },
  {
    id: 'large_chest',
    name: 'Large Chest',
    coins: 14950,       // $2.99 / 0.0002 = 14,950 coins
    price: 2.99,
    priceInCents: 299,
    icon: 'üéÅ',
    popular: true,
    description: 'Most popular choice!'
  },
  {
    id: 'treasure_chest',
    name: 'Treasure Chest',
    coins: 19950,       // $3.99 / 0.0002 = 19,950 coins
    price: 3.99,
    priceInCents: 399,
    icon: 'üíé',
    popular: false,
    description: 'Maximum value'
  },
  {
    id: 'pirates_bounty',
    name: "Pirate's Bounty",
    coins: 24950,       // $4.99 / 0.0002 = 24,950 coins
    price: 4.99,
    priceInCents: 499,
    icon: 'üè¥‚Äç‚ò†Ô∏è',
    popular: false,
    description: 'Ultimate treasure'
  }
];

export default function TreasureChestScreen() {
  const navigation = useNavigation();
  const [currentCoins, setCurrentCoins] = useState(0);
  const [loading, setLoading] = useState(true);
  const [purchasing, setPurchasing] = useState(false);

  // Fetch user's current coin balance
  useEffect(() => {
    fetchCoinBalance();
  }, []);

  const fetchCoinBalance = async () => {
    try {
      setLoading(true);
      
      // Get token and user info
      const token = await AsyncStorage.getItem('userToken');
      const userStr = await AsyncStorage.getItem('user');
      const user = userStr ? JSON.parse(userStr) : null;

      if (!token || !user) {
        Alert.alert('Error', 'Please log in to view your coins.');
        navigation.goBack();
        return;
      }

      // Fetch coin balance from backend
      const response = await fetch(`${process.env.EXPO_PUBLIC_API_BASE_URL || 'YOUR_API_URL'}/api/coins/balance`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch coin balance');
      }

      const data = await response.json();
      setCurrentCoins(data.coins || 0);

    } catch (error) {
      console.error('Error fetching coins:', error);
      Alert.alert('Error', 'Could not load your coin balance. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handlePurchase = async (package_info) => {
    try {
      setPurchasing(true);

      // Get user info
      const token = await AsyncStorage.getItem('userToken');
      const userStr = await AsyncStorage.getItem('user');
      const user = userStr ? JSON.parse(userStr) : null;

      if (!token || !user) {
        Alert.alert('Error', 'Please log in to purchase coins.');
        return;
      }

      // Navigate to payment screen with coin package details
      navigation.navigate('Payment', {
        amount: package_info.priceInCents,
        caseId: `coins_${package_info.id}`,
        userId: user.id,
        coinPackage: {
          id: package_info.id,
          coins: package_info.coins,
          name: package_info.name
        },
        onSuccess: () => {
          // This will be called after successful payment
          handlePurchaseSuccess(package_info);
        }
      });

    } catch (error) {
      console.error('Purchase error:', error);
      Alert.alert('Error', 'Failed to start purchase. Please try again.');
    } finally {
      setPurchasing(false);
    }
  };

  const handlePurchaseSuccess = async (package_info) => {
    try {
      // Refresh coin balance after successful purchase
      await fetchCoinBalance();

      // Show success message
      Alert.alert(
        'üéâ Purchase Complete!',
        `You've received ${package_info.coins.toLocaleString()} coins!`,
        [
          {
            text: 'View Balance',
            onPress: () => {
              // Refresh the screen
              fetchCoinBalance();
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error after purchase:', error);
    }
  };

  const formatNumber = (num) => {
    return num.toLocaleString();
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={COLORS.gold} />
          <Text style={styles.loadingText}>Loading your treasure...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.headerTitle}>‚öì Treasure Chest ‚öì</Text>
          <Text style={styles.headerSubtitle}>Purchase coins to unlock progress</Text>
        </View>

        {/* Current Balance Card */}
        <View style={styles.balanceCard}>
          <View style={styles.balanceHeader}>
            <Text style={styles.balanceLabel}>Your Current Treasure</Text>
            <Text style={styles.balanceIcon}>üí∞</Text>
          </View>
          <Text style={styles.balanceAmount}>{formatNumber(currentCoins)}</Text>
          <Text style={styles.balanceSubtext}>coins</Text>
          
          <View style={styles.balanceInfo}>
            <Text style={styles.infoText}>
              üí° Coins help you progress through your case journey
            </Text>
          </View>
        </View>

        {/* Coin Packages */}
        <View style={styles.packagesSection}>
          <Text style={styles.sectionTitle}>Choose Your Treasure</Text>
          <Text style={styles.sectionSubtitle}>
            1 coin = $0.0002 ‚Ä¢ Use coins to unlock case stages
          </Text>

          {COIN_PACKAGES.map((pkg, index) => (
            <TouchableOpacity
              key={pkg.id}
              style={[
                styles.packageCard,
                pkg.popular && styles.packageCardPopular
              ]}
              onPress={() => handlePurchase(pkg)}
              disabled={purchasing}
              activeOpacity={0.8}
            >
              {pkg.popular && (
                <View style={styles.popularBadge}>
                  <Text style={styles.popularText}>‚≠ê MOST POPULAR</Text>
                </View>
              )}

              <View style={styles.packageContent}>
                <View style={styles.packageLeft}>
                  <Text style={styles.packageIcon}>{pkg.icon}</Text>
                  <View style={styles.packageInfo}>
                    <Text style={styles.packageName}>{pkg.name}</Text>
                    <Text style={styles.packageDescription}>{pkg.description}</Text>
                    <View style={styles.coinsRow}>
                      <Text style={styles.packageCoins}>
                        {formatNumber(pkg.coins)}
                      </Text>
                      <Text style={styles.coinsLabel}> coins</Text>
                    </View>
                  </View>
                </View>

                <View style={styles.packageRight}>
                  <View style={styles.priceButton}>
                    <Text style={styles.priceText}>${pkg.price.toFixed(2)}</Text>
                  </View>
                </View>
              </View>
            </TouchableOpacity>
          ))}
        </View>

        {/* Value Proposition */}
        <View style={styles.valueSection}>
          <Text style={styles.valueTitle}>Why Purchase Coins?</Text>
          
          <View style={styles.valueItem}>
            <Text style={styles.valueIcon}>‚ö°</Text>
            <View style={styles.valueTextContainer}>
              <Text style={styles.valueItemTitle}>Fast Progress</Text>
              <Text style={styles.valueItemText}>
                Advance through your litigation roadmap quickly
              </Text>
            </View>
          </View>

          <View style={styles.valueItem}>
            <Text style={styles.valueIcon}>üéØ</Text>
            <View style={styles.valueTextContainer}>
              <Text style={styles.valueItemTitle}>Unlock Achievements</Text>
              <Text style={styles.valueItemText}>
                Earn exclusive badges and rewards
              </Text>
            </View>
          </View>

          <View style={styles.valueItem}>
            <Text style={styles.valueIcon}>üèÜ</Text>
            <View style={styles.valueTextContainer}>
              <Text style={styles.valueItemTitle}>Climb the Leaderboard</Text>
              <Text style={styles.valueItemText}>
                Compete with other users for top rankings
              </Text>
            </View>
          </View>
        </View>

        {/* Security Notice */}
        <View style={styles.securityNotice}>
          <Text style={styles.securityText}>
            üîí Secure payment powered by Stripe
          </Text>
          <Text style={styles.securitySubtext}>
            All transactions are encrypted and secure
          </Text>
        </View>

        {/* Footer Padding */}
        <View style={{ height: 40 }} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.tan,
  },
  scrollContent: {
    padding: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: COLORS.brown,
    fontWeight: '600',
  },
  
  // Header
  header: {
    alignItems: 'center',
    marginBottom: 24,
  },
  headerTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
    marginBottom: 8,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: COLORS.brown,
    textAlign: 'center',
  },

  // Balance Card
  balanceCard: {
    backgroundColor: COLORS.white,
    borderRadius: 16,
    padding: 24,
    marginBottom: 24,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 5,
    borderWidth: 3,
    borderColor: COLORS.gold,
  },
  balanceHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  balanceLabel: {
    fontSize: 16,
    color: COLORS.brown,
    fontWeight: '600',
    marginRight: 8,
  },
  balanceIcon: {
    fontSize: 24,
  },
  balanceAmount: {
    fontSize: 48,
    fontWeight: 'bold',
    color: COLORS.gold,
    textShadowColor: COLORS.bronze,
    textShadowOffset: { width: 2, height: 2 },
    textShadowRadius: 4,
  },
  balanceSubtext: {
    fontSize: 18,
    color: COLORS.brown,
    fontWeight: '600',
    marginTop: -8,
  },
  balanceInfo: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: COLORS.darkTan,
    width: '100%',
  },
  infoText: {
    fontSize: 14,
    color: COLORS.brown,
    textAlign: 'center',
  },

  // Packages Section
  packagesSection: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
    marginBottom: 8,
    textAlign: 'center',
  },
  sectionSubtitle: {
    fontSize: 14,
    color: COLORS.brown,
    textAlign: 'center',
    marginBottom: 20,
  },

  // Package Cards
  packageCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    borderWidth: 2,
    borderColor: COLORS.darkTan,
  },
  packageCardPopular: {
    borderColor: COLORS.gold,
    borderWidth: 3,
    backgroundColor: '#FFFEF0',
  },
  popularBadge: {
    position: 'absolute',
    top: -10,
    right: 20,
    backgroundColor: COLORS.gold,
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  popularText: {
    fontSize: 11,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
  },
  packageContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  packageLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  packageIcon: {
    fontSize: 48,
    marginRight: 16,
  },
  packageInfo: {
    flex: 1,
  },
  packageName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
    marginBottom: 4,
  },
  packageDescription: {
    fontSize: 13,
    color: COLORS.brown,
    marginBottom: 8,
  },
  coinsRow: {
    flexDirection: 'row',
    alignItems: 'baseline',
  },
  packageCoins: {
    fontSize: 22,
    fontWeight: 'bold',
    color: COLORS.gold,
  },
  coinsLabel: {
    fontSize: 14,
    color: COLORS.brown,
    fontWeight: '600',
  },
  packageRight: {
    marginLeft: 12,
  },
  priceButton: {
    backgroundColor: COLORS.green,
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
    minWidth: 80,
    alignItems: 'center',
  },
  priceText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.white,
  },

  // Value Section
  valueSection: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: 20,
    marginBottom: 24,
  },
  valueTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
    marginBottom: 16,
    textAlign: 'center',
  },
  valueItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  valueIcon: {
    fontSize: 32,
    marginRight: 12,
  },
  valueTextContainer: {
    flex: 1,
  },
  valueItemTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.darkBrown,
    marginBottom: 4,
  },
  valueItemText: {
    fontSize: 14,
    color: COLORS.brown,
    lineHeight: 20,
  },

  // Security Notice
  securityNotice: {
    alignItems: 'center',
    paddingVertical: 16,
  },
  securityText: {
    fontSize: 14,
    color: COLORS.brown,
    fontWeight: '600',
    marginBottom: 4,
  },
  securitySubtext: {
    fontSize: 12,
    color: COLORS.brown,
    opacity: 0.7,
  },
});
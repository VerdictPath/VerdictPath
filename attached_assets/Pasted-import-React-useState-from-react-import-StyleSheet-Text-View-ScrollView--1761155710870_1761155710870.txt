import React, { useState } from 'react';
import { 
  StyleSheet, 
  Text, 
  View, 
  ScrollView, 
  TouchableOpacity,
  Modal,
  SafeAreaView,
  Alert,
  Dimensions
} from 'react-native';

const { width, height } = Dimensions.get('window');

// ============================================
// PIRATE MAP LITIGATION ROADMAP WITH UPLOADS
// ============================================

const PirateMapRoadmap = ({ navigateToMedicalHub }) => {
  const [totalCoins, setTotalCoins] = useState(0);
  const [selectedStage, setSelectedStage] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  // ============================================
  // ROADMAP DATA WITH UPLOAD REQUIREMENTS
  // ============================================
  const [roadmapStages, setRoadmapStages] = useState([
    {
      id: 1,
      name: 'Pre-Litigation',
      coins: 100,
      completed: false,
      description: 'Gather all necessary documentation before filing your case',
      position: { top: '15%', left: '10%' },
      subStages: [
        { 
          id: 'pre-1', 
          name: 'Police Report', 
          coins: 10, 
          completed: false, 
          icon: '🚔',
          description: 'Upload the official police accident report',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-2', 
          name: 'Body Cam Footage', 
          coins: 10, 
          completed: false, 
          icon: '📹',
          description: 'Upload body camera footage if available',
          acceptedFormats: 'MP4, MOV, AVI',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-3', 
          name: 'Dash Cam Footage', 
          coins: 10, 
          completed: false, 
          icon: '🎥',
          description: 'Upload dash camera recordings',
          acceptedFormats: 'MP4, MOV, AVI',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-4', 
          name: 'Pictures', 
          coins: 5, 
          completed: false, 
          icon: '📸',
          description: 'Upload photos of accident scene, vehicle damage, and injuries',
          acceptedFormats: 'JPG, PNG, HEIC',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-5', 
          name: 'Health Insurance Card', 
          coins: 5, 
          completed: false, 
          icon: '💳',
          description: 'Upload copy of health insurance card (front and back)',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-6', 
          name: 'Auto Insurance Company', 
          coins: 5, 
          completed: false, 
          icon: '🏢',
          description: 'Upload auto insurance provider information',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-7', 
          name: 'Auto Insurance Policy Number', 
          coins: 5, 
          completed: false, 
          icon: '🔢',
          description: 'Upload your auto insurance policy documents',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: []
        },
        { 
          id: 'pre-8', 
          name: 'Medical Bills', 
          coins: 15, 
          completed: false, 
          icon: '💵',
          description: 'Upload all medical treatment bills',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: [],
          linkToMedicalHub: true
        },
        { 
          id: 'pre-9', 
          name: 'Medical Records', 
          coins: 35, 
          completed: false, 
          icon: '📋',
          description: 'Upload complete medical records and reports',
          acceptedFormats: 'PDF, JPG, PNG',
          uploaded: false,
          uploadedFiles: [],
          linkToMedicalHub: true
        }
      ],
      videos: [
        { id: 'v1', title: 'Pre-Litigation Essentials', price: 2.99, duration: '15 min' },
        { id: 'v2', title: 'Document Collection Guide', price: 3.99, duration: '20 min' }
      ]
    },
    {
      id: 2,
      name: 'Complaint Filed',
      coins: 25,
      completed: false,
      description: 'Your lawsuit is officially filed with the court',
      position: { top: '25%', left: '65%' },
      subStages: [
        { id: 'cf-1', name: 'Draft Complaint', coins: 8, completed: false, icon: '📝', description: 'Create initial complaint document' },
        { id: 'cf-2', name: 'File with Court', coins: 10, completed: false, icon: '⚖️', description: 'Submit to court system' },
        { id: 'cf-3', name: 'Serve Defendant', coins: 7, completed: false, icon: '📬', description: 'Legally notify defendant' }
      ],
      videos: [
        { id: 'v3', title: 'Filing Your Complaint', price: 4.99, duration: '18 min' }
      ]
    },
    {
      id: 3,
      name: 'Discovery Begins',
      coins: 50,
      completed: false,
      description: 'Exchange information with the opposing party',
      position: { top: '40%', left: '25%' },
      subStages: [
        { id: 'disc-1', name: 'Interrogatories', coins: 15, completed: false, icon: '❓', description: 'Answer written questions' },
        { id: 'disc-2', name: 'Document Requests', coins: 15, completed: false, icon: '📄', description: 'Provide requested documents' },
        { id: 'disc-3', name: 'Admissions', coins: 20, completed: false, icon: '✅', description: 'Respond to admission requests' }
      ],
      videos: [
        { id: 'v4', title: 'Understanding Discovery', price: 3.99, duration: '22 min' },
        { id: 'v5', title: 'Discovery Response Strategies', price: 4.99, duration: '25 min' }
      ]
    },
    {
      id: 4,
      name: 'Depositions',
      coins: 75,
      completed: false,
      description: 'Sworn testimony is recorded under oath',
      position: { top: '50%', left: '70%' },
      subStages: [
        { id: 'dep-1', name: 'Deposition Preparation', coins: 25, completed: false, icon: '📖', description: 'Prepare for questioning' },
        { id: 'dep-2', name: 'Your Deposition', coins: 30, completed: false, icon: '🎤', description: 'Give your testimony' },
        { id: 'dep-3', name: 'Opposing Party Deposition', coins: 20, completed: false, icon: '👥', description: 'Witness other depositions' }
      ],
      videos: [
        { id: 'v6', title: 'Deposition Deep Dive', price: 4.99, duration: '30 min' },
        { id: 'v7', title: 'How to Testify Effectively', price: 5.99, duration: '28 min' }
      ]
    },
    {
      id: 5,
      name: 'Mediation',
      coins: 50,
      completed: false,
      description: 'Attempt to settle the case with a neutral mediator',
      position: { top: '65%', left: '15%' },
      subStages: [
        { id: 'med-1', name: 'Mediation Prep', coins: 15, completed: false, icon: '📋', description: 'Prepare settlement strategy' },
        { id: 'med-2', name: 'Mediation Session', coins: 25, completed: false, icon: '🤝', description: 'Attend mediation meeting' },
        { id: 'med-3', name: 'Settlement Negotiation', coins: 10, completed: false, icon: '💼', description: 'Negotiate terms' }
      ],
      videos: [
        { id: 'v8', title: 'Mediation Mastery', price: 4.99, duration: '24 min' }
      ]
    },
    {
      id: 6,
      name: 'Trial Prep',
      coins: 100,
      completed: false,
      description: 'Prepare your case for trial presentation',
      position: { top: '75%', left: '60%' },
      subStages: [
        { id: 'tp-1', name: 'Witness Preparation', coins: 30, completed: false, icon: '👨‍⚖️', description: 'Prep witnesses for testimony' },
        { id: 'tp-2', name: 'Exhibit Organization', coins: 25, completed: false, icon: '🗂️', description: 'Organize evidence and exhibits' },
        { id: 'tp-3', name: 'Trial Strategy', coins: 45, completed: false, icon: '🎯', description: 'Develop trial presentation plan' }
      ],
      videos: [
        { id: 'v9', title: 'Trial Preparation Guide', price: 5.99, duration: '35 min' },
        { id: 'v10', title: 'Courtroom Procedures', price: 4.99, duration: '28 min' }
      ]
    },
    {
      id: 7,
      name: 'Trial/Settlement',
      coins: 100,
      completed: false,
      description: 'Present your case in court or reach final settlement',
      position: { top: '85%', left: '30%' },
      subStages: [
        { id: 'ts-1', name: 'Opening Statements', coins: 30, completed: false, icon: '🗣️', description: 'Present opening arguments' },
        { id: 'ts-2', name: 'Presentation of Evidence', coins: 40, completed: false, icon: '📊', description: 'Present case evidence' },
        { id: 'ts-3', name: 'Closing Arguments', coins: 30, completed: false, icon: '⚡', description: 'Make final arguments' }
      ],
      videos: [
        { id: 'v11', title: 'Trial Tactics', price: 6.99, duration: '40 min' }
      ]
    },
    {
      id: 8,
      name: 'Case Resolved',
      coins: 200,
      completed: false,
      description: 'Your case reaches final resolution - congratulations!',
      position: { top: '92%', left: '75%' },
      subStages: [
        { id: 'cr-1', name: 'Judgment Entry', coins: 100, completed: false, icon: '⚖️', description: 'Court enters judgment' },
        { id: 'cr-2', name: 'Case Closure', coins: 100, completed: false, icon: '🎊', description: 'Finalize all matters' }
      ],
      videos: [
        { id: 'v12', title: 'Post-Trial Procedures', price: 3.99, duration: '18 min' }
      ]
    }
  ]);

  // ============================================
  // OPEN STAGE MODAL
  // ============================================
  const openStageModal = (stage) => {
    setSelectedStage(stage);
    setModalVisible(true);
  };

  // ============================================
  // CLOSE MODAL
  // ============================================
  const closeModal = () => {
    setModalVisible(false);
    setTimeout(() => setSelectedStage(null), 300);
  };

  // ============================================
  // HANDLE FILE UPLOAD
  // ============================================
  const handleFileUpload = (subStageId) => {
    // Check if this is a medical hub item
    const subStage = selectedStage.subStages.find(s => s.id === subStageId);
    
    if (subStage.linkToMedicalHub) {
      Alert.alert(
        '🏥 Medical Hub',
        `This document is managed in your Medical Hub. Would you like to go there now?`,
        [
          { text: 'Cancel', style: 'cancel' },
          { 
            text: 'Go to Medical Hub', 
            onPress: () => {
              closeModal();
              if (navigateToMedicalHub) {
                navigateToMedicalHub();
              } else {
                Alert.alert('Navigation', 'Medical Hub navigation would happen here');
              }
            }
          }
        ]
      );
      return;
    }

    // For non-medical items, simulate file upload
    Alert.alert(
      '📁 Upload Document',
      `Select files to upload for "${subStage.name}"\n\nAccepted formats: ${subStage.acceptedFormats}`,
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Take Photo', 
          onPress: () => simulateUpload(subStageId, 'photo')
        },
        { 
          text: 'Choose Files', 
          onPress: () => simulateUpload(subStageId, 'file')
        }
      ]
    );
  };

  // ============================================
  // SIMULATE FILE UPLOAD
  // ============================================
  const simulateUpload = (subStageId, uploadType) => {
    setRoadmapStages(prevStages =>
      prevStages.map(stage => {
        if (stage.id === selectedStage.id) {
          const updatedSubStages = stage.subStages.map(subStage => {
            if (subStage.id === subStageId) {
              const fileName = uploadType === 'photo' 
                ? `photo_${Date.now()}.jpg` 
                : `document_${Date.now()}.pdf`;
              
              const newFiles = [...(subStage.uploadedFiles || []), fileName];
              
              Alert.alert(
                '✅ Upload Successful!',
                `${fileName} has been uploaded successfully.`
              );
              
              return { 
                ...subStage, 
                uploaded: true, 
                uploadedFiles: newFiles 
              };
            }
            return subStage;
          });

          setSelectedStage({ ...stage, subStages: updatedSubStages });
          return { ...stage, subStages: updatedSubStages };
        }
        return stage;
      })
    );
  };

  // ============================================
  // VIEW UPLOADED FILES
  // ============================================
  const viewUploadedFiles = (subStage) => {
    if (!subStage.uploaded || subStage.uploadedFiles.length === 0) {
      Alert.alert('No Files', 'No files have been uploaded yet.');
      return;
    }

    const fileList = subStage.uploadedFiles.map((file, index) => 
      `${index + 1}. ${file}`
    ).join('\n');

    Alert.alert(
      '📁 Uploaded Files',
      fileList,
      [{ text: 'OK' }]
    );
  };

  // ============================================
  // MARK SUB-STAGE COMPLETE
  // ============================================
  const markSubStageComplete = (subStageId) => {
    const subStage = selectedStage.subStages.find(s => s.id === subStageId);
    
    // Check if medical hub item
    if (subStage.linkToMedicalHub) {
      Alert.alert(
        'Medical Hub Required',
        'Please complete this step in the Medical Hub first.',
        [
          { text: 'Cancel', style: 'cancel' },
          { 
            text: 'Go to Medical Hub', 
            onPress: () => {
              closeModal();
              if (navigateToMedicalHub) {
                navigateToMedicalHub();
              }
            }
          }
        ]
      );
      return;
    }

    // Check if files are uploaded
    if (!subStage.uploaded) {
      Alert.alert(
        'Upload Required',
        'Please upload the required documents before marking this step as complete.',
        [{ text: 'OK' }]
      );
      return;
    }

    setRoadmapStages(prevStages =>
      prevStages.map(stage => {
        if (stage.id === selectedStage.id) {
          const updatedSubStages = stage.subStages.map(sub => {
            if (sub.id === subStageId && !sub.completed) {
              setTotalCoins(prev => prev + sub.coins);
              Alert.alert('🎉 Step Complete!', `You earned ${sub.coins} coins!`);
              return { ...sub, completed: true };
            }
            return sub;
          });

          const allComplete = updatedSubStages.every(sub => sub.completed);
          if (allComplete && !stage.completed) {
            setTotalCoins(prev => prev + stage.coins);
            Alert.alert('🏴‍☠️ Treasure Claimed!', `${stage.name} complete! +${stage.coins} bonus coins!`);
            return { ...stage, subStages: updatedSubStages, completed: true };
          }

          setSelectedStage({ ...stage, subStages: updatedSubStages });
          return { ...stage, subStages: updatedSubStages };
        }
        return stage;
      })
    );
  };

  // ============================================
  // COMPLETE ENTIRE STAGE
  // ============================================
  const completeEntireStage = () => {
    // Check if all uploads are complete for Pre-Litigation
    if (selectedStage.id === 1) {
      const missingUploads = selectedStage.subStages.filter(
        sub => !sub.uploaded && !sub.linkToMedicalHub
      );
      
      if (missingUploads.length > 0) {
        Alert.alert(
          'Uploads Required',
          `Please upload documents for:\n${missingUploads.map(s => s.name).join('\n')}`,
          [{ text: 'OK' }]
        );
        return;
      }
    }

    Alert.alert(
      'Complete Stage?',
      `Mark "${selectedStage.name}" as complete and earn ${selectedStage.coins} coins?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Complete',
          onPress: () => {
            setRoadmapStages(prevStages =>
              prevStages.map(stage => {
                if (stage.id === selectedStage.id && !stage.completed) {
                  const updatedSubStages = stage.subStages.map(sub => ({ ...sub, completed: true }));
                  const subStageCoins = stage.subStages.reduce((sum, sub) => sum + sub.coins, 0);
                  setTotalCoins(prev => prev + stage.coins + subStageCoins);
                  Alert.alert('🏴‍☠️ Treasure Claimed!', `You earned ${stage.coins + subStageCoins} total coins!`);
                  return { ...stage, subStages: updatedSubStages, completed: true };
                }
                return stage;
              })
            );
            closeModal();
          }
        }
      ]
    );
  };

  // ============================================
  // WATCH VIDEO
  // ============================================
  const watchVideo = (video) => {
    Alert.alert(
      `${video.title}`,
      `Duration: ${video.duration}\nPrice: $${video.price}\n\nPurchase this video tutorial?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Purchase', onPress: () => Alert.alert('Success!', 'Video added to your library!') }
      ]
    );
  };

  // ============================================
  // RENDER TREASURE CHEST
  // ============================================
  const renderTreasure = (stage) => {
    const isCompleted = stage.completed;
    return (
      <TouchableOpacity
        key={stage.id}
        style={[styles.treasureChest, { top: stage.position.top, left: stage.position.left }]}
        onPress={() => openStageModal(stage)}
        activeOpacity={0.7}
      >
        <Text style={styles.treasureIcon}>{isCompleted ? '🏆' : '💰'}</Text>
        {isCompleted && (
          <View style={styles.completeBadge}>
            <Text style={styles.completeBadgeText}>✓</Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  // ============================================
  // RENDER STAGE MODAL
  // ============================================
  const renderStageModal = () => {
    if (!selectedStage) return null;

    const completedSubStages = selectedStage.subStages.filter(s => s.completed).length;
    const totalSubStages = selectedStage.subStages.length;
    const progress = totalSubStages > 0 ? Math.round((completedSubStages / totalSubStages) * 100) : 0;

    return (
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={closeModal}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            {/* Header */}
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{selectedStage.name}</Text>
              <TouchableOpacity onPress={closeModal} style={styles.closeButton}>
                <Text style={styles.closeButtonText}>✕</Text>
              </TouchableOpacity>
            </View>

            <ScrollView showsVerticalScrollIndicator={false}>
              {/* Description */}
              <Text style={styles.modalDescription}>{selectedStage.description}</Text>

              {/* Progress Bar */}
              {totalSubStages > 0 && (
                <View style={styles.progressSection}>
                  <Text style={styles.progressLabel}>Progress: {completedSubStages}/{totalSubStages} steps</Text>
                  <View style={styles.progressBarContainer}>
                    <View style={[styles.progressBarFill, { width: `${progress}%` }]} />
                  </View>
                </View>
              )}

              {/* Coin Reward */}
              <View style={styles.coinsSection}>
                <Text style={styles.coinsSectionTitle}>🪙 Reward</Text>
                <Text style={styles.coinsAmount}>{selectedStage.coins} coins</Text>
              </View>

              {/* Sub-Stages with Upload */}
              {selectedStage.subStages.length > 0 && (
                <View style={styles.subStagesSection}>
                  <Text style={styles.sectionTitle}>📋 Steps in this Stage</Text>
                  {selectedStage.subStages.map(subStage => (
                    <View key={subStage.id} style={styles.subStageCard}>
                      <View style={styles.subStageHeader}>
                        <Text style={styles.subStageRowIcon}>{subStage.icon}</Text>
                        <View style={styles.subStageInfo}>
                          <Text style={styles.subStageRowName}>{subStage.name}</Text>
                          <Text style={styles.subStageDescription}>{subStage.description}</Text>
                          <Text style={styles.subStageRowCoins}>+{subStage.coins} coins</Text>
                        </View>
                      </View>

                      {/* Upload Section */}
                      <View style={styles.uploadSection}>
                        {subStage.linkToMedicalHub ? (
                          <TouchableOpacity
                            style={styles.medicalHubButton}
                            onPress={() => handleFileUpload(subStage.id)}
                          >
                            <Text style={styles.medicalHubIcon}>🏥</Text>
                            <Text style={styles.medicalHubText}>Manage in Medical Hub</Text>
                          </TouchableOpacity>
                        ) : (
                          <>
                            <TouchableOpacity
                              style={styles.uploadButton}
                              onPress={() => handleFileUpload(subStage.id)}
                            >
                              <Text style={styles.uploadIcon}>📤</Text>
                              <Text style={styles.uploadButtonText}>
                                {subStage.uploaded ? 'Upload More' : 'Upload Files'}
                              </Text>
                            </TouchableOpacity>

                            {subStage.uploaded && (
                              <TouchableOpacity
                                style={styles.viewFilesButton}
                                onPress={() => viewUploadedFiles(subStage)}
                              >
                                <Text style={styles.viewFilesText}>
                                  View Files ({subStage.uploadedFiles.length})
                                </Text>
                              </TouchableOpacity>
                            )}
                          </>
                        )}
                      </View>

                      {/* Complete Button */}
                      <View style={styles.completeSection}>
                        {subStage.completed ? (
                          <View style={styles.checkmarkLarge}>
                            <Text style={styles.checkmarkText}>✓ Completed</Text>
                          </View>
                        ) : (
                          <TouchableOpacity
                            style={[
                              styles.miniCompleteButton,
                              (!subStage.uploaded && !subStage.linkToMedicalHub) && styles.disabledButton
                            ]}
                            onPress={() => markSubStageComplete(subStage.id)}
                          >
                            <Text style={styles.miniCompleteButtonText}>Mark Complete</Text>
                          </TouchableOpacity>
                        )}
                      </View>
                    </View>
                  ))}
                </View>
              )}

              {/* Tutorial Videos */}
              {selectedStage.videos.length > 0 && (
                <View style={styles.videosSection}>
                  <Text style={styles.sectionTitle}>🎬 Tutorial Videos</Text>
                  {selectedStage.videos.map(video => (
                    <TouchableOpacity
                      key={video.id}
                      style={styles.videoCard}
                      onPress={() => watchVideo(video)}
                    >
                      <View style={styles.videoLeft}>
                        <Text style={styles.videoPlayIcon}>▶️</Text>
                        <View style={styles.videoInfo}>
                          <Text style={styles.videoTitle}>{video.title}</Text>
                          <Text style={styles.videoDuration}>{video.duration}</Text>
                        </View>
                      </View>
                      <Text style={styles.videoPrice}>${video.price}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              )}

              {/* Complete Stage Button */}
              {!selectedStage.completed && (
                <TouchableOpacity
                  style={styles.completeStageButton}
                  onPress={completeEntireStage}
                >
                  <Text style={styles.completeStageButtonText}>
                    ✓ Mark Entire Stage Complete
                  </Text>
                </TouchableOpacity>
              )}

              {selectedStage.completed && (
                <View style={styles.completedBanner}>
                  <Text style={styles.completedBannerText}>🏆 Stage Completed!</Text>
                </View>
              )}
            </ScrollView>
          </View>
        </View>
      </Modal>
    );
  };

  // ============================================
  // MAIN RENDER
  // ============================================
  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>⚔️ Pirate's Litigation Map</Text>
        <View style={styles.coinsDisplay}>
          <Text style={styles.coinsIcon}>🪙</Text>
          <Text style={styles.coinsText}>{totalCoins} Doubloons</Text>
        </View>
      </View>

      {/* Pirate Map */}
      <ScrollView 
        style={styles.mapScrollView}
        contentContainerStyle={styles.mapContainer}
      >
        {/* Map Background */}
        <View style={styles.pirateMap}>
          {/* Decorative Elements */}
          <Text style={[styles.mapDecor, { top: '5%', left: '5%' }]}>⚓</Text>
          <Text style={[styles.mapDecor, { top: '10%', right: '8%' }]}>🦜</Text>
          <Text style={[styles.mapDecor, { top: '30%', left: '85%' }]}>🏴‍☠️</Text>
          <Text style={[styles.mapDecor, { top: '55%', left: '5%' }]}>🗡️</Text>
          <Text style={[styles.mapDecor, { top: '70%', right: '10%' }]}>🌊</Text>
          <Text style={[styles.mapDecor, { bottom: '8%', left: '15%' }]}>🧭</Text>

          {/* Treasure Path Line (dashed) */}
          <View style={styles.treasurePath} />

          {/* Treasure Chests */}
          {roadmapStages.map(stage => renderTreasure(stage))}

          {/* Legend */}
          <View style={styles.legend}>
            <Text style={styles.legendTitle}>🗺️ Map Legend</Text>
            <Text style={styles.legendItem}>💰 = Treasure to Claim</Text>
            <Text style={styles.legendItem}>🏆 = Treasure Found!</Text>
          </View>
        </View>
      </ScrollView>

      {/* Stage Detail Modal */}
      {renderStageModal()}
    </SafeAreaView>
  );
};

// ============================================
// STYLES
// ============================================
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a2e',
  },
  header: {
    backgroundColor: '#0f3460',
    padding: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottomWidth: 3,
    borderBottomColor: '#d4af37',
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#d4af37',
  },
  coinsDisplay: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#16213e',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 2,
    borderColor: '#d4af37',
  },
  coinsIcon: {
    fontSize: 20,
    marginRight: 5,
  },
  coinsText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#d4af37',
  },
  mapScrollView: {
    flex: 1,
  },
  mapContainer: {
    minHeight: height * 1.2,
  },
  pirateMap: {
    flex: 1,
    backgroundColor: '#c9a86a',
    margin: 10,
    borderRadius: 15,
    borderWidth: 5,
    borderColor: '#8b7355',
    minHeight: height * 1.1,
    position: 'relative',
    padding: 20,
  },
  treasurePath: {
    position: 'absolute',
    top: '15%',
    left: '15%',
    right: '15%',
    bottom: '10%',
    borderWidth: 3,
    borderColor: '#654321',
    borderStyle: 'dashed',
    borderRadius: 20,
    opacity: 0.3,
  },
  treasureChest: {
    position: 'absolute',
    width: 60,
    height: 60,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f4e4c1',
    borderRadius: 30,
    borderWidth: 3,
    borderColor: '#8b4513',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.4,
    shadowRadius: 5,
    elevation: 8,
  },
  treasureIcon: {
    fontSize: 35,
  },
  completeBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#27ae60',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#fff',
  },
  completeBadgeText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  mapDecor: {
    position: 'absolute',
    fontSize: 30,
    opacity: 0.6,
  },
  legend: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#f4e4c1',
    padding: 15,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: '#8b4513',
  },
  legendTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#654321',
    marginBottom: 8,
  },
  legendItem: {
    fontSize: 12,
    color: '#654321',
    marginBottom: 4,
  },
  // Modal Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    maxHeight: height * 0.85,
    padding: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
    paddingBottom: 15,
    borderBottomWidth: 2,
    borderBottomColor: '#d4af37',
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#0f3460',
    flex: 1,
  },
  closeButton: {
    width: 35,
    height: 35,
    borderRadius: 17.5,
    backgroundColor: '#ecf0f1',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    fontSize: 20,
    color: '#7f8c8d',
    fontWeight: 'bold',
  },
  modalDescription: {
    fontSize: 15,
    color: '#555',
    lineHeight: 22,
    marginBottom: 20,
  },
  progressSection: {
    marginBottom: 20,
  },
  progressLabel: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 8,
    fontWeight: '600',
  },
  progressBarContainer: {
    height: 12,
    backgroundColor: '#ecf0f1',
    borderRadius: 6,
    overflow: 'hidden',
  },
  progressBarFill: {
    height: '100%',
    backgroundColor: '#27ae60',
    borderRadius: 6,
  },
  coinsSection: {
    backgroundColor: '#fff9e6',
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
    borderWidth: 2,
    borderColor: '#d4af37',
    alignItems: 'center',
  },
  coinsSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#654321',
    marginBottom: 5,
  },
  coinsAmount: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#d4af37',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
    marginTop: 5,
  },
  subStagesSection: {
    marginBottom: 20,
  },
  subStageCard: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 12,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  subStageHeader: {
    flexDirection: 'row',
    marginBottom: 12,
  },
  subStageRowIcon: {
    fontSize: 28,
    marginRight: 12,
  },
  subStageInfo: {
    flex: 1,
  },
  subStageRowName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 4,
  },
  subStageDescription: {
    fontSize: 13,
    color: '#7f8c8d',
    marginBottom: 6,
    lineHeight: 18,
  },
  subStageRowCoins: {
    fontSize: 13,
    color: '#f39c12',
    fontWeight: '600',
  },
  uploadSection: {
    marginBottom: 10,
  },
  uploadButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#3498db',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8,
  },
  uploadIcon: {
    fontSize: 18,
    marginRight: 8,
  },
  uploadButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  viewFilesButton: {
    backgroundColor: '#ecf0f1',
    padding: 8,
    borderRadius: 6,
    alignItems: 'center',
  },
  viewFilesText: {
    color: '#34495e',
    fontSize: 13,
    fontWeight: '600',
  },
  medicalHubButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#e8f8f5',
    padding: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#1abc9c',
  },
  medicalHubIcon: {
    fontSize: 20,
    marginRight: 8,
  },
  medicalHubText: {
    color: '#16a085',
    fontSize: 14,
    fontWeight: '600',
  },
  completeSection: {
    marginTop: 5,
  },
  miniCompleteButton: {
    backgroundColor: '#27ae60',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#95a5a6',
  },
  miniCompleteButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  checkmarkLarge: {
    backgroundColor: '#d5f4e6',
    padding: 10,
    borderRadius: 8,
    alignItems: 'center',
  },
  checkmarkText: {
    color: '#27ae60',
    fontSize: 14,
    fontWeight: 'bold',
  },
  videosSection: {
    marginBottom: 20,
  },
  videoCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  videoLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  videoPlayIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  videoInfo: {
    flex: 1,
  },
  videoTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 3,
  },
  videoDuration: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  videoPrice: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#27ae60',
  },
  completeStageButton: {
    backgroundColor: '#27ae60',
    padding: 18,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 10,
    marginBottom: 20,
  },
  completeStageButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  completedBanner: {
    backgroundColor: '#d5f4e6',
    padding: 15,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 20,
    borderWidth: 2,
    borderColor: '#27ae60',
  },
  completedBannerText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#27ae60',
  },
});

export default PirateMapRoadmap;
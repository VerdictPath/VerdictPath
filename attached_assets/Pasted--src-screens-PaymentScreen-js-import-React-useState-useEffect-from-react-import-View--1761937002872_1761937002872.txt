// src/screens/PaymentScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  ActivityIndicator,
  SafeAreaView,
  ScrollView
} from 'react-native';
import { StripeProvider, useStripe } from '@stripe/stripe-react-native';

// IMPORTANT: Replace with your actual publishable key
const STRIPE_PUBLISHABLE_KEY = 'pk_test_YOUR_PUBLISHABLE_KEY_HERE';

// IMPORTANT: Replace with your Replit URL
const API_URL = 'https://your-replit-url.repl.co/api/payment';

/**
 * Payment Checkout Component
 * Handles the actual payment flow
 */
function PaymentCheckout({ amount, caseId, userId, onSuccess, onCancel }) {
  const { initPaymentSheet, presentPaymentSheet } = useStripe();
  const [loading, setLoading] = useState(false);

  // Initialize payment sheet when component mounts
  const initializePaymentSheet = async () => {
    try {
      setLoading(true);

      // 1. Fetch payment intent from backend
      console.log('Creating payment intent...');
      const response = await fetch(`${API_URL}/create-payment-intent`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: amount, // Amount in cents
          currency: 'usd',
          caseId: caseId,
          userId: userId,
          description: `Verdict Path Payment - Case ${caseId}`
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create payment intent');
      }

      const { clientSecret, paymentIntentId } = await response.json();
      console.log('Payment intent created:', paymentIntentId);

      // 2. Initialize the payment sheet
      const { error } = await initPaymentSheet({
        merchantDisplayName: 'Verdict Path',
        paymentIntentClientSecret: clientSecret,
        
        // Enable Apple Pay
        applePay: {
          merchantCountryCode: 'US',
          // cartItems: [{ label: 'Case Payment', amount: (amount / 100).toFixed(2) }],
        },
        
        // Enable Google Pay
        googlePay: {
          merchantCountryCode: 'US',
          testEnv: true, // Set to false in production
          currencyCode: 'usd',
        },
        
        // Customize appearance
        appearance: {
          colors: {
            primary: '#007AFF',
            background: '#ffffff',
            componentBackground: '#f8f9fa',
          },
        },
        
        // Default billing details
        defaultBillingDetails: {
          name: 'Customer Name', // Replace with actual user name
        },
        
        // Return URL for web redirects
        returnURL: 'verdictpath://payment-return',
      });

      if (error) {
        console.error('Payment sheet initialization error:', error);
        Alert.alert('Error', error.message);
        return false;
      }

      console.log('Payment sheet initialized successfully');
      return true;

    } catch (error) {
      console.error('Payment initialization error:', error);
      Alert.alert('Error', 'Failed to initialize payment. Please try again.');
      return false;
    } finally {
      setLoading(false);
    }
  };

  // Present the payment sheet to user
  const openPaymentSheet = async () => {
    setLoading(true);

    // Initialize if not already done
    const initialized = await initializePaymentSheet();
    
    if (!initialized) {
      setLoading(false);
      return;
    }

    // Show the payment sheet
    const { error } = await presentPaymentSheet();

    setLoading(false);

    if (error) {
      // User canceled or payment failed
      console.log('Payment sheet error:', error);
      
      if (error.code === 'Canceled') {
        Alert.alert('Payment Canceled', 'You have canceled the payment.');
        if (onCancel) onCancel();
      } else {
        Alert.alert('Payment Failed', error.message);
      }
    } else {
      // Payment succeeded
      console.log('Payment successful!');
      Alert.alert(
        'Success!',
        'Your payment was processed successfully.',
        [
          {
            text: 'OK',
            onPress: () => {
              if (onSuccess) onSuccess();
            }
          }
        ]
      );
    }
  };

  return (
    <View style={styles.checkoutContainer}>
      <View style={styles.amountContainer}>
        <Text style={styles.amountLabel}>Total Amount</Text>
        <Text style={styles.amountValue}>${(amount / 100).toFixed(2)}</Text>
      </View>

      <TouchableOpacity
        style={[styles.payButton, loading && styles.payButtonDisabled]}
        onPress={openPaymentSheet}
        disabled={loading}
      >
        {loading ? (
          <ActivityIndicator color="#ffffff" />
        ) : (
          <Text style={styles.payButtonText}>Pay Now</Text>
        )}
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.cancelButton}
        onPress={onCancel}
        disabled={loading}
      >
        <Text style={styles.cancelButtonText}>Cancel</Text>
      </TouchableOpacity>

      <Text style={styles.secureText}>ðŸ”’ Secure payment powered by Stripe</Text>
    </View>
  );
}

/**
 * Main Payment Screen
 * Wraps the checkout in StripeProvider
 */
export default function PaymentScreen({ route, navigation }) {
  // Get parameters from navigation
  const { amount = 5000, caseId, userId } = route?.params || {};

  const handlePaymentSuccess = () => {
    // Navigate to success screen or back to previous screen
    navigation.goBack();
    // Or: navigation.navigate('PaymentSuccess');
  };

  const handlePaymentCancel = () => {
    navigation.goBack();
  };

  return (
    <StripeProvider
      publishableKey={STRIPE_PUBLISHABLE_KEY}
      merchantIdentifier="merchant.com.verdictpath" // For Apple Pay
      urlScheme="verdictpath" // For deep linking
    >
      <SafeAreaView style={styles.container}>
        <ScrollView contentContainerStyle={styles.scrollContent}>
          <View style={styles.header}>
            <Text style={styles.title}>Payment</Text>
            <Text style={styles.subtitle}>Complete your payment securely</Text>
          </View>

          <PaymentCheckout
            amount={amount}
            caseId={caseId}
            userId={userId}
            onSuccess={handlePaymentSuccess}
            onCancel={handlePaymentCancel}
          />

          <View style={styles.infoContainer}>
            <Text style={styles.infoTitle}>Payment Methods Accepted</Text>
            <Text style={styles.infoText}>â€¢ Credit and Debit Cards</Text>
            <Text style={styles.infoText}>â€¢ Apple Pay</Text>
            <Text style={styles.infoText}>â€¢ Google Pay</Text>
          </View>
        </ScrollView>
      </SafeAreaView>
    </StripeProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContent: {
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  checkoutContainer: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  amountContainer: {
    alignItems: 'center',
    marginBottom: 30,
    paddingVertical: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  amountLabel: {
    fontSize: 16,
    color: '#666',
    marginBottom: 8,
  },
  amountValue: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#007AFF',
  },
  payButton: {
    backgroundColor: '#007AFF',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  payButtonDisabled: {
    backgroundColor: '#a0c4ff',
  },
  payButtonText: {
    color: '#ffffff',
    fontSize: 18,
    fontWeight: '600',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  cancelButtonText: {
    color: '#666',
    fontSize: 16,
    fontWeight: '600',
  },
  secureText: {
    textAlign: 'center',
    color: '#999',
    fontSize: 12,
    marginTop: 8,
  },
  infoContainer: {
    marginTop: 30,
    padding: 20,
    backgroundColor: '#ffffff',
    borderRadius: 12,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
});